Microsoft Windows [Version 10.0.19045.5737]
(c) Microsoft Corporation. All rights reserved.

C:\Users\yogap>cd documents

C:\Users\yogap\Documents>cd golangTutorial

C:\Users\yogap\Documents\golangTutorial>copy con IfStatement.go
package main
import "fmt"
func FindEven(){
for i:=0;i<100;i++ {
if i%2==0 {
fmt.Println(i)
}
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>notepad main.go

C:\Users\yogap\Documents\golangTutorial>go run .
^C
C:\Users\yogap\Documents\golangTutorial>copy con IfStatement.go
package main
Overwrite IfStatement.go? (Yes/No/All): yes
import "fmt"
func FindEven(){
for i:=0;i<100;i++ {
if i%2==0 {
fmt.Println(i)
}
}
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\OptionalFor1.go:8:5: undefined: fmt.println

C:\Users\yogap\Documents\golangTutorial>copy con IfStatement.go
package main
Overwrite IfStatement.go? (Yes/No/All): ywa
import "fmt"
func FindEven(){
for i := 0 ; i < 100 ; i++ {
if i%2==0 {
fmt.Println(i)
}
}
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\OptionalFor1.go:8:5: undefined: fmt.println

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningThe sum of value is  1024
1024
0
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98

C:\Users\yogap\Documents\golangTutorial>copy con IfStatement2.go
package main
import "fmt"
func findGreater() {
if 20 > 18 {
fmt.Println("Yes 20 is greater than 18 ")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningThe sum of value is  1024
1024
0
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98
Yes 20 is greater than 18

C:\Users\yogap\Documents\golangTutorial>copy con IfStatement3.go
package main
import "fmt"
func Smallernum() {
x := 10
y := 20
if x < y {
fmt.Println("x is lesser then y", x)
}
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningThe sum of value is  1024
1024
0
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98
Yes 20 is greater than 18
x is lesser then y 10

C:\Users\yogap\Documents\golangTutorial>copy con IfElseStatement.go
package main
import "fmt"
func EvenOrOdd() {
x := 9
if x%2 ==0 {
fmt.Println("The number is Even")
}else{
fmt.Println("The number is odd")
}
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningThe sum of value is  1024
1024
Yes 20 is greater than 18
x is lesser then y 10
The number is odd

C:\Users\yogap\Documents\golangTutorial>copy con PrimeNumber.go
package main
import "fmt"
func prime() {
num := 7
count := 0
i := 2
if num%1==0 {
^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>copy con PrimeNumber.go
package main
Overwrite PrimeNumber.go? (Yes/No/All): yes
import "fmt"
func prime() {
num := 7
count := 0
i := 2
for num/2>0 {
if num%2==0 {
count++
}
}
if count==0 {
fmt.Println("The number is prime")
}else{
fmt.Println("The number is not prime")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\PrimeNumber.go:6:1: declared and not used: i

C:\Users\yogap\Documents\golangTutorial>copy con PrimeNumber.go
package main
Overwrite PrimeNumber.go? (Yes/No/All): yes
import "fmt"
func prime() {
num := 7
count := 0
 i := 2
for num/2 > 0 {
if num%i == 0 {
fmt.Println("The number is Prime")
}else{
fmt.Println("The number is odd")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\PrimeNumber.go:12:3: syntax error: unexpected EOF, expected }

C:\Users\yogap\Documents\golangTutorial>copy con PrimeNumber.go
package main
Overwrite PrimeNumber.go? (Yes/No/All): yes
import "fmt"
func prime() {
num := 7
count := 0
i := 2
for num/2 >0 {
if num%i==0 {
count++
}
}
if count==0 {
fmt.Prinltn("prime")
}else{
fmt.Println("not prime")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\PrimeNumber.go:13:5: undefined: fmt.Prinltn

C:\Users\yogap\Documents\golangTutorial>copy con PrimeNumber.go
package mian
Overwrite PrimeNumber.go? (Yes/No/All): all
package main
import "fmt"
func prime(){
num := 7
count := 0
i := 2
for num/2 >0 {
if num%i==0 {
count++
}
}
if count==0 {
fmt.Println("Prime")
}else{
fmt.Println("Not prime")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
found packages main (AllDatatypes.go) and mian (PrimeNumber.go) in C:\Users\yogap\Documents\golangTutorial

C:\Users\yogap\Documents\golangTutorial>copy con PrimeNumber.go
package main
Overwrite PrimeNumber.go? (Yes/No/All): yes
import "fmt"
func prime(){
num := 7
count := 0
i := 2
for num/2 >0 {
if num%i==0 {
count++
}
}
if count==0 {
fmt.Println("Prime")
}else{
fmt.Println("Not prime")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningThe sum of value is  1024
1024
Yes 20 is greater than 18
x is lesser then y 10
The number is odd
exit status 0xc000013a

C:\Users\yogap\Documents\golangTutorial>copy con PrimeNumber.go
package main
Overwrite PrimeNumber.go? (Yes/No/All): yes
import "fmt"
func prime() {
num := 7
count := 0
for i := 2; num/2<0 ; i++ {
if num%i==0 {
count++
}}
if count==0 {
fmt.Println("Prime")
}else{
fmt.Println("Not Prime")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningThe sum of value is  1024
1024
Yes 20 is greater than 18
x is lesser then y 10
The number is odd
Prime

C:\Users\yogap\Documents\golangTutorial>copy con IfElseStatement2.go
package main
import "fmt"
func temp(){
tem := 14
if temp>14 {
fmt.Println("The temperature is warm")
}else{
fmt.Println("The temperature is cold")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\IfElseStatement2.go:4:1: declared and not used: tem
.\IfElseStatement2.go:5:9: cannot convert 14 (untyped int constant) to type func()

C:\Users\yogap\Documents\golangTutorial>copy con IfElseStatement2.go
package main
Overwrite IfElseStatement2.go? (Yes/No/All): yes
import "fmt"
func temp() {
tem := 14
if tem> 14 {
fmt.Println("the temperature is warm")
}else{
fmt.Println("the temperature is cold")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningThe sum of value is  1024
1024
Yes 20 is greater than 18
x is lesser then y 10
The number is odd
Prime
the temperature is cold

C:\Users\yogap\Documents\golangTutorial>copy con ElseIfStatement.go
package main
import "fmt"
var x = 10
if x>=10 {
^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>copy con ElseIfStatement.go
package main
Overwrite ElseIfStatement.go? (Yes/No/All): yes
import "fmt"
var x = 10
func twocondition() {
if x>=10 {
fmt.Println("The value is greater")
}else if x<20 {
fmt.Println("The value is greater than 20")
}else{
fmt.Println("Not greater")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningThe sum of value is  1024
1024
Yes 20 is greater than 18
x is lesser then y 10
The number is odd
Prime
the temperature is cold
The value is greater

C:\Users\yogap\Documents\golangTutorial>copy con GreatestOfThree.go
package main
import "fmt"
x := 10
y :=20
z :=15
func GreatestNumber() {
if x>y && x>z {
fmt.Println("x is greater")
}else if y>x && y>z {
fmt.Println("y is greater")
}else{
fmt.Println("z is greater")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\GreatestOfThree.go:3:1: syntax error: non-declaration statement outside function body

C:\Users\yogap\Documents\golangTutorial>copy con GreatestofThree.go
package main
Overwrite GreatestofThree.go? (Yes/No/All): yes
import "fmt"
var x=10
var y=20
var z=15
func GreatestNumber() {
if x>y && x>z {
fmt.Println("x is greater")
}else if y>x && y>z {
fmt.Println("y is greater")
}else{
fmt.Println("z is greater")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\GreatestOfThree.go:3:5: x redeclared in this block
        .\ElseIfStatement.go:3:5: other declaration of x
.\complex.go:6:5: z redeclared in this block
        .\GreatestOfThree.go:5:5: other declaration of z

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\GreatestOfThree.go:3:5: x redeclared in this block
        .\ElseIfStatement.go:3:5: other declaration of x
.\complex.go:6:5: z redeclared in this block
        .\GreatestOfThree.go:5:5: other declaration of z

C:\Users\yogap\Documents\golangTutorial>copy con GreatestofThree.go
package main
Overwrite GreatestofThree.go? (Yes/No/All): yes
import "fmt"
cun GreatestNumber() {
var x=10
var y=20
var z=15
if x>y && x>z {
fmt.Println("x is greater")
}else if y>x && y>z {
fmt.Println("y is greater")
}else{
fmt.Println("z is greater")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\GreatestOfThree.go:3:1: syntax error: non-declaration statement outside function body
.\GreatestOfThree.go:7:1: syntax error: non-declaration statement outside function body

C:\Users\yogap\Documents\golangTutorial>copy con GreatestofThree.go
package main
Overwrite GreatestofThree.go? (Yes/No/All): yes
func GreatestNumber() {
var x=10
var y=20
var z=15
if x>y && x>z {
fmt.Println("x is greater")
}else if y>x && y>z {
fmt.Println("y is greater")
}else{
fmt.Println("z is greater")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\GreatestOfThree.go:7:1: undefined: fmt
.\GreatestOfThree.go:9:1: undefined: fmt
.\GreatestOfThree.go:11:1: undefined: fmt

C:\Users\yogap\Documents\golangTutorial>copy con GreatestofThree.go
package main
Overwrite GreatestofThree.go? (Yes/No/All): yes
import "fmt"
var x=10
var y=20
var z=15
if x>y && x>z {
fmt.Println("x is greater")
}else if y>x && y>z {
fmt.Println("y is greater")
}else{
fmt.Println("z is greater")
^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>copy con GreatestofThree.go
package main
Overwrite GreatestofThree.go? (Yes/No/All): yes
import "fmt"
func GreatestNumber() {
var x=10
var y=20
var z=15
if x>y && x>z {
fmt.Println("x is greater")
}else if y>x && y>z {
fmt.Println("y is greater")
}else{
fmt.Println("z is greater")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningy is greater

C:\Users\yogap\Documents\golangTutorial>copy con NestedIfStatement.go
package main
import "fmt"
func Nestedif() {
var x=10
if x>10{
fmt.Println("The number is greater than 10")
}if else x<10 {
fmt.Println("The number is less than 10)
if x<20 {
fmt.Println("The number is also less than 20)
}}
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\NestedIfStatement.go:7:2: syntax error: unexpected keyword if at end of statement
.\NestedIfStatement.go:8:42: newline in string
.\NestedIfStatement.go:9:1: syntax error: unexpected keyword if, expected {
.\NestedIfStatement.go:10:47: newline in string
.\NestedIfStatement.go:10:47: syntax error: unexpected newline in argument list; possibly missing comma or )
.\NestedIfStatement.go:12:1: syntax error: non-declaration statement outside function body

C:\Users\yogap\Documents\golangTutorial>copy con NestedIfStatement.go
package main
Overwrite NestedIfStatement.go? (Yes/No/All): yes
import "fmt"
func Nestedif()
var x=20
if x>10 {
fmt.Println("The number is greater than 10")
if x>15 {
fmt.Println("The number is also greater than 15")
}
}else {
fmt.Println("The number is less than 10")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>copy con NestedIfStatement.go
package main
Overwrite NestedIfStatement.go? (Yes/No/All): yes
import "fmt"
func Nestedif() {
var x=20
if x>10 {
fmt.Println("The number is greater than 10")
if x>15 {
fmt.Println("The number is also greater than 15")
}
}else {
fmt.Println("The number is less than 10")
}}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningy is greater
The number is greater than 10
The number is also greater than 15

C:\Users\yogap\Documents\golangTutorial>copy con IfConditionString.go
package main
import "fmt"
import "math"
func squareroot(x float64) string {
if x<0 {
return Sqrt(-x) + "i"
}
returm fmt.Sprint(math.Sqrt(x))
}
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\IfConditionString.go:8:8: syntax error: unexpected name fmt at end of statement
.\IfConditionString.go:10:1: syntax error: non-declaration statement outside function body

C:\Users\yogap\Documents\golangTutorial>copy con IfConditionString.go
package main
Overwrite IfConditionString.go? (Yes/No/All): yes
import (
"fmt"
"math"
)

func sqrt(x float64) string {
if x < 0 {
return sqrt(-x) + "i"
}
return fmt.Sprint(math.Sqrt(x))
}
^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningy is greater
The number is greater than 10
The number is also greater than 15
2 2i

C:\Users\yogap\Documents\golangTutorial>copy con IfWithShortStatement.go
package main
import (
"fmt"
"math"
)
func CompareAndReturn() {
^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>copy con IfWithShortStatement.go
package main
Overwrite IfWithShortStatement.go? (Yes/No/All): yes
import (
"fmt"
"math"
)
func power(x,y,limit float64) float64 {
 if v:=pow(x,y) ; v<limit {
return v
}
return limit
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\IfWithShortStatement.go:3:1: "fmt" imported and not used
.\IfWithShortStatement.go:4:1: "math" imported and not used
.\IfWithShortStatement.go:7:8: undefined: pow

C:\Users\yogap\Documents\golangTutorial>copy con IfWithShortStatement.go
package main
Overwrite IfWithShortStatement.go? (Yes/No/All): yes
import (
"fmt"
"math"
)func power(x,y,limit float64) float64 {
 if v:=Pow(x,y) ; v<limit {
return v
}
return limit
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\IfWithShortStatement.go:5:2: syntax error: unexpected keyword func after top level declaration

C:\Users\yogap\Documents\golangTutorial>copy con IfWithShortStatement.go
package main
Overwrite IfWithShortStatement.go? (Yes/No/All): yes
import (
"fmt"
"math"
)
func power(x,y,limit float64) float64 {
 if v:=Pow(x,y) ; v<limit {
return v
}
return limit
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\IfWithShortStatement.go:3:1: "fmt" imported and not used
.\IfWithShortStatement.go:4:1: "math" imported and not used
.\IfWithShortStatement.go:7:8: undefined: Pow

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\IfWithShortStatement.go:3:1: "fmt" imported and not used
.\IfWithShortStatement.go:4:1: "math" imported and not used
.\IfWithShortStatement.go:7:8: undefined: Pow

C:\Users\yogap\Documents\golangTutorial>copy con IfWithShortStatement.go

Overwrite IfWithShortStatement.go? (Yes/No/All): yes
package main
import "math"
func power(x,y,limit float64) float64 {
 if v:=Pow(x,y) ; v<limit {
return v
}
return limit
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\main.go:73:30: syntax error: unexpected newline in argument list; possibly missing comma or )

C:\Users\yogap\Documents\golangTutorial>copy con IfWithShortStatement.go
package main
Overwrite IfWithShortStatement.go? (Yes/No/All): yes
import "math"
func power(x,y,limit float64) float64 {
if v:=math.Pow(x,y); v<limit {
return v
}
return limit
}^Z
        1 file(s) copied.

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\main.go:73:30: syntax error: unexpected newline in argument list; possibly missing comma or )

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\main.go:74:15: syntax error: unexpected newline in argument list; possibly missing comma or )

C:\Users\yogap\Documents\golangTutorial>go run .
# test
.\main.go:74:15: syntax error: unexpected newline in argument list; possibly missing comma or )

C:\Users\yogap\Documents\golangTutorial>go run .
main is runningy is greater
The number is greater than 10
The number is also greater than 15
2 2i
9 10

C:\Users\yogap\Documents\golangTutorial>